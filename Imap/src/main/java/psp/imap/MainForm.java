/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package psp.imap;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeBodyPart;
import javax.swing.DefaultListModel;

/**
 *
 * @author angel
 */
public class MainForm extends javax.swing.JFrame implements Runnable {

    private Thread readEmailsThread = new Thread(this);
    private String correosPath = "D:\\Clases2\\SPPSP\\IMAP\\Imap\\src\\main\\resources\\correos";
    private File directorio = new File(correosPath);
    private DefaultListModel correosListModel = new DefaultListModel();

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabpnlCorreos = new javax.swing.JTabbedPane();
        pnlImap = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaMensage = new javax.swing.JTextArea();
        btnReadCorreos = new javax.swing.JButton();
        lblTotalCorreos = new javax.swing.JLabel();
        prgCorreos = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstCorreos = new javax.swing.JList<>();
        pnlSmtp = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txaMensage.setEditable(false);
        txaMensage.setColumns(20);
        txaMensage.setLineWrap(true);
        txaMensage.setRows(5);
        txaMensage.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txaMensage);

        btnReadCorreos.setText("Read");
        btnReadCorreos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadCorreosActionPerformed(evt);
            }
        });

        prgCorreos.setStringPainted(true);

        lstCorreos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstCorreos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCorreosValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstCorreos);

        javax.swing.GroupLayout pnlImapLayout = new javax.swing.GroupLayout(pnlImap);
        pnlImap.setLayout(pnlImapLayout);
        pnlImapLayout.setHorizontalGroup(
            pnlImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImapLayout.createSequentialGroup()
                .addGroup(pnlImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prgCorreos, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblTotalCorreos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)))
                .addGap(27, 27, 27)
                .addGroup(pnlImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlImapLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnReadCorreos, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))
                    .addGroup(pnlImapLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        pnlImapLayout.setVerticalGroup(
            pnlImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlImapLayout.createSequentialGroup()
                .addGroup(pnlImapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlImapLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalCorreos, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                    .addGroup(pnlImapLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReadCorreos)))
                .addGap(7, 7, 7)
                .addComponent(prgCorreos, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        tabpnlCorreos.addTab("IMAP", pnlImap);

        javax.swing.GroupLayout pnlSmtpLayout = new javax.swing.GroupLayout(pnlSmtp);
        pnlSmtp.setLayout(pnlSmtpLayout);
        pnlSmtpLayout.setHorizontalGroup(
            pnlSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        pnlSmtpLayout.setVerticalGroup(
            pnlSmtpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );

        tabpnlCorreos.addTab("SMTP", pnlSmtp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpnlCorreos)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpnlCorreos)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReadCorreosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadCorreosActionPerformed
        readEmailsThread.start();
        btnReadCorreos.setEnabled(false);
    }//GEN-LAST:event_btnReadCorreosActionPerformed

    private void lstCorreosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCorreosValueChanged
        if (!(lstCorreos.getSelectedValue() == null || lstCorreos.getSelectedValue().isBlank() || lstCorreos.getSelectedValue().isEmpty())) {
            String selectedEmail = lstCorreos.getSelectedValue();
            txaMensage.setText("");
            for(File f : directorio.listFiles()){
                if(f.getName().equals(selectedEmail)){
                    BufferedReader reader = null;
                    try {
                        reader = new BufferedReader(new FileReader(f.getAbsolutePath()));
                        String line;
                        while((line = reader.readLine()) != null){
                            txaMensage.append(line + System.lineSeparator());;
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            reader.close();
                        } catch (IOException ex) {
                            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_lstCorreosValueChanged

    @Override
    public void run() {
        try {
            leerCorreos();
        } catch (MessagingException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    private void leerCorreos() throws MessagingException, IOException {
        cargarLista();
        Folder folder = null;
        Store store = null;
        try {
            Properties properties = new Properties();

            // server setting
            properties.put("mail.imap.host", "imap.gmail.com");
            properties.put("mail.imap.port", "993");

            // SSL setting
            properties.setProperty("mail.imap.socketFactory.class",
                    "javax.net.ssl.SSLSocketFactory");
            properties.setProperty("mail.imap.socketFactory.fallback",
                    "false");
            properties.setProperty("mail.imap.socketFactory.port",
                    String.valueOf(993));

            properties.setProperty("mail.store.protocol", "imaps");

            Session session = Session.getDefaultInstance(properties);
            store = session.getStore("imaps");
            store.connect("imap.gmail.com", "pruebaspsp111@gmail.com", "pspimap123");
            folder = store.getFolder("Inbox");

            folder.open(Folder.READ_WRITE);
            Message messages[] = folder.getMessages();
            int total = folder.getMessageCount();
            lblTotalCorreos.setText("Número total de mensages: " + total);
            //System.out.println("No of Unread Messages : " + folder.getUnreadMessageCount());
            for (int i = 0; i < messages.length; ++i) {

                Message msg = messages[i];
                /*
            if we don''t want to fetch messages already processed
            if (!msg.isSet(Flags.Flag.SEEN)) {
               String from = "unknown";
               ...
            }
                 */
                //if (!msg.isSet(Flags.Flag.SEEN)) {

                    System.out.println("MESSAGE #" + (i + 1) + ":");
                    String from = "unknown";
                    if (msg.getReplyTo().length >= 1) {
                        from = msg.getReplyTo()[0].toString();
                    } else if (msg.getFrom().length >= 1) {
                        from = msg.getFrom()[0].toString();
                    }
                    String subject = msg.getSubject();
                    //System.out.println("Saving ... " + subject +" " + from);
                    // you may want to replace the spaces with "_"
                    // the TEMP directory is used to store the files
                    String filename = "D:\\Clases2\\SPPSP\\IMAP\\Imap\\src\\main\\resources\\correos\\" + subject;
                    saveParts(msg.getContent(), filename, subject);

                    msg.setFlag(Flags.Flag.SEEN, true);

                    
                    // to delete the message
                    // msg.setFlag(Flags.Flag.DELETED, true);
                /*} else {

                    System.out.println("MESSAGE #" + (i + 1) + ":" + " is already saved.");

                    String subject = msg.getSubject();
                }*/
                prgCorreos.setValue((i + 1) * prgCorreos.getMaximum() / (total));
            }
        } finally {
            if (folder != null) {
                folder.close(true);
            }
            if (store != null) {
                store.close();
            }
        }
    }

    private void saveParts(Object content, String filename, String subject) throws IOException, MessagingException {
        OutputStream out = null;
        InputStream in = null;
        try {
            if (content instanceof Multipart) {
                Multipart multi = ((Multipart) content);
                int parts = multi.getCount();
                for (int j = 0; j < parts; ++j) {
                    MimeBodyPart part = (MimeBodyPart) multi.getBodyPart(j);
                    if (part.getContent() instanceof Multipart) {
                        // part-within-a-part, do some recursion...
                        saveParts(part.getContent(), filename, subject);
                    } else {
                        String extension = "";
                        if (part.isMimeType("text/html")) {
                            extension = "html";
                        } else {
                            if (part.isMimeType("text/plain")) {
                                extension = "txt";
                                //aqui?
                            } else {
                                //  Try to get the name of the attachment
                                extension = part.getDataHandler().getName();
                            }
                            filename = filename + "." + extension;
                            System.out.println("... " + filename);
                            //cargarLista();
                            //con esto el .txt.null no se pone y no se puede leer, mejor sera cargarlista de 0 aunque tarde mas? idk
                            correosListModel.addElement(subject + "." + extension);
                            lstCorreos.setModel(correosListModel);
                            out = new FileOutputStream(new File(filename), true);
                            in = part.getInputStream();
                            int k;
                            while ((k = in.read()) != -1) {
                                out.write(k);
                            }
                        }
                    }
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }

    private void cargarLista() {
        //correosListModel.clear();
        for (String s : directorio.list()) {
            correosListModel.addElement(s);
        }
        lstCorreos.setModel(correosListModel);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReadCorreos;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTotalCorreos;
    private javax.swing.JList<String> lstCorreos;
    private javax.swing.JPanel pnlImap;
    private javax.swing.JPanel pnlSmtp;
    private javax.swing.JProgressBar prgCorreos;
    private javax.swing.JTabbedPane tabpnlCorreos;
    private javax.swing.JTextArea txaMensage;
    // End of variables declaration//GEN-END:variables

}
